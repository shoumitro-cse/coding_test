package com.shoumitro.coding_test;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.util.FileCopyUtils; 

import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;


@Controller	// This means that this class is a Controller
//@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
//@RequestMapping("/") // This means URL's start with /demo (after Application path)
public class MainController {

    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired // This means to get the bean called userRepository
    private ChildService childService;
    @Autowired
    private ParentService parentService;
    
    
    @GetMapping("/parent/insert/")
    public String insertParentData() throws IOException, ParseException {
        Resource resource = new ClassPathResource("classpath:Parent.json");
        InputStream inputStream = resource.getInputStream();
        try {
            byte[] bdata = FileCopyUtils.copyToByteArray(inputStream);
            String data = new String(bdata, StandardCharsets.UTF_8);
            
            JSONParser parser = new JSONParser();
            Map mapData = (HashMap)parser.parse(data);
            ArrayList arrlist = (ArrayList) mapData.get("data");
            
            for (int counter = 0; counter < arrlist.size(); counter++) { 	
                Map mapParentData = (HashMap) arrlist.get(counter);	
                Parent parent = new Parent();
                parent.setId(Integer.parseInt(mapParentData.get("id").toString()));
                parent.setReceiver(mapParentData.get("sender").toString());
                parent.setSender(mapParentData.get("sender").toString());
                parent.setTotalAmount(Float.parseFloat(mapParentData.get("totalAmount").toString()));
                parentService.save(parent);
             } 
            
        } catch (IOException e) {
            System.out.println(e);
        }
    
        return "success";
    }
    
    
    @GetMapping("/child/insert/")
    public String insertChildData() throws IOException, ParseException {
        Resource resource = new ClassPathResource("classpath:Child.json");
        InputStream inputStream = resource.getInputStream();
        try {
            byte[] bdata = FileCopyUtils.copyToByteArray(inputStream);
            String data = new String(bdata, StandardCharsets.UTF_8);
            
            JSONParser parser = new JSONParser();
            Map mapData = (HashMap)parser.parse(data);
            ArrayList arrlist = (ArrayList) mapData.get("data");
            
            for (int counter = 0; counter < arrlist.size(); counter++) { 	
                Map mapChildData = (HashMap) arrlist.get(counter);
                Child child = new Child();
                child.setId(Integer.parseInt(mapChildData.get("id").toString()));
                Parent parent = parentService.getParentById(Integer.parseInt(mapChildData.get("parentId").toString()));
                child.setParent(parent);
                child.setPaidAmount(Float.parseFloat(mapChildData.get("paidAmount").toString()));
                childService.save(child);
                
                ArrayList<Child> childList = new ArrayList<>();
                childList.add(child);
                childList.addAll(parent.getChildList());
                parent.setChildList(childList);
                parentService.saveOrUpdate(parent);
             } 
            
        } catch (IOException e) {
            System.out.println(e);
        }
    
        return "success";
    }
    
    @GetMapping("/parent/list/")
    public String getParentList(Model model) {
         model.addAttribute("parentList", parentService.getAllParents());
        return "parent_list";
    }

    @GetMapping("/child/list/")
    public String getParentChildList(@RequestParam(name = "id", required = false, defaultValue = "1") String id, Model model) {
         Parent parent = parentService.getParentById(Integer.parseInt(id));
         model.addAttribute("childList", parent.getChildList());
        return "child_list";
    }
    

}
